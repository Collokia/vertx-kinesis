buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://oss.sonatype.org/content/repositories/snapshots'
        }
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:0.1-SNAPSHOT'
    }
}

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'groovy'

if (!JavaVersion.current().java8Compatible) {
    throw new IllegalStateException('''A Haiku:
                                      |  This needs Java 8,
                                      |  You are using something else,
                                      |  Refresh. Try again.'''.stripMargin())
}

repositories {
    mavenCentral()
    maven {
        url = 'http://oss.sonatype.org/content/repositories/snapshots/'
    }
}

configurations {
    annotationProcessor
}

ext {
    generatedSrcDir = "$projectDir/src/generated"
}

sourceSets {
    main {
        groovy {
            srcDir "$generatedSrcDir/groovy"
        }
        resources {
            srcDir "$generatedSrcDir/resources"
        }
    }
}

dependencies {
    compile 'io.vertx:vertx-core:3.0.0'
    compile 'io.vertx:vertx-unit:3.0.0'
    compile 'io.vertx:vertx-codegen:3.0.0'
    compile 'io.vertx:vertx-lang-groovy:3.0.0'
    compile 'io.vertx:vertx-lang-js:3.0.0'
    compile 'io.vertx:vertx-service-factory:3.0.0'
    compile 'io.vertx:vertx-hazelcast:3.0.0'
    compile 'io.vertx:vertx-service-proxy:3.0.0'

    compile 'org.jetbrains.kotlin:kotlin-stdlib:0.1-SNAPSHOT'

    compile 'com.amazonaws:aws-java-sdk-kinesis:1.10.10'

    compile 'nl.komponents.kovenant:kovenant:2.2.+'

    annotationProcessor 'io.vertx:vertx-codegen:3.0.0'

    testCompile 'junit:junit:4.12'
    testCompile 'io.vertx:vertx-hazelcast:3.0.0'
}

task cleanGenerated(type: Delete) {
    delete generatedSrcDir
}

compileJava {
    dependsOn cleanGenerated
    doFirst {
        mkdir generatedSrcDir
    }
    options.compilerArgs += [
            "-AoutputDirectory=$generatedSrcDir",
            "-processor", "io.vertx.codegen.CodeGenProcessor"
    ]
    classpath += configurations.annotationProcessor
}

task runNpmKinesalite(type: Exec) {
	commandLine 'npm', 'install', '-g', 'kinesalite'
}

task startKinesalite(type: ExecWait) {
    command 'kinesalite'
    ready 'Listening at http://0.0.0.0:4567'
    directory '..'
}

test {
    dependsOn runNpmKinesalite, startKinesalite
}

// https://fbflex.wordpress.com/2013/03/14/gradle-madness-execwait-a-task-that-waits-for-commandline-calls-to-be-ready/
class ExecWait extends DefaultTask {
    String command
    String ready
    String directory
 
    @TaskAction
    def spawnProcess() {
 
        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)
        builder.directory(new File(directory))
        Process process = builder.start()
 
        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))
 
        def line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "$command is ready"
                break;
            }
        }
    }
}

task freeAllPorts << {
    def ports = [4567]
 
    ports.each { port ->
        def cmd = "lsof -Fp -i :$port"
        def process = cmd.execute()
        process.in.eachLine { line ->
            def killProcess = "kill -9 ${ line.substring(1) }".execute()
            killProcess.waitFor()
        }
    }
}

test.finalizedBy(freeAllPorts)