apply from: "$rootDir/project-settings.gradle"

buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://oss.sonatype.org/content/repositories/snapshots'
        }
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.13"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
    }
}

apply from: "$rootDir/gradle/sonatype-top.gradle"

apply from: "$rootDir/gradle/kotlin-settings.gradle"
apply plugin: 'net.ltgt.apt'

apply from: "$rootDir/gradle/idea.gradle"
apply from: "$rootDir/gradle/sonatype-subproj.gradle"
apply from: "$rootDir/gradle/bintray.gradle"



repositories {
    mavenCentral()
    maven {
        url = 'http://oss.sonatype.org/content/repositories/snapshots/'
    }
}


dependencies {
    compile "io.vertx:vertx-core:$version_vertx"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    compile "com.amazonaws:aws-java-sdk-kinesis:$version_kinesis"

    compile "nl.komponents.kovenant:kovenant:$version_kovenant"

    compileOnly "io.vertx:vertx-codegen:$version_vertx"
    apt "io.vertx:vertx-codegen:$version_vertx"
    apt "io.vertx:vertx-codegen:$version_vertx:processor"

    testCompile "io.vertx:vertx-unit:$version_vertx"
    testCompile "io.vertx:vertx-lang-groovy:$version_vertx"
    testCompile "io.vertx:vertx-lang-js:$version_vertx"
    testCompile "io.vertx:vertx-service-factory:$version_vertx"
    testCompile "io.vertx:vertx-hazelcast:$version_vertx"
    testCompile "io.vertx:vertx-service-proxy:$version_vertx"

    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"

    // fix for bad dependency
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.3"
}

task runNpmKinesalite(type: Exec) {
	commandLine 'npm', 'install', '-g', 'kinesalite'
}

task startKinesalite(type: ExecWait) {
    command 'kinesalite'
    ready 'Listening at'
    directory '..'
}

test {
    dependsOn runNpmKinesalite, startKinesalite
}

// https://fbflex.wordpress.com/2013/03/14/gradle-madness-execwait-a-task-that-waits-for-commandline-calls-to-be-ready/
class ExecWait extends DefaultTask {
    String command
    String ready
    String directory
 
    @TaskAction
    def spawnProcess() {
 
        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)
        builder.directory(new File(directory))
        Process process = builder.start()
 
        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))
 
        def line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "$command is ready"
                break;
            }
        }
    }
}

task freeAllPorts << {
    def ports = [4567]
 
    ports.each { port ->
        def cmd = "lsof -Fp -i :$port"
        def process = cmd.execute()
        process.in.eachLine { line ->
            def killProcess = "kill -9 ${ line.substring(1) }".execute()
            killProcess.waitFor()
        }
    }
}

test.finalizedBy(freeAllPorts)

task wrapper(type: Wrapper) {
    gradleVersion = "$version_gradle"
}

defaultTasks 'clean', 'build', 'check'